/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const SettingsIndexLazyRouteImport = createFileRoute('/settings/')()
const ProductsIndexLazyRouteImport = createFileRoute('/products/')()
const OcrIndexLazyRouteImport = createFileRoute('/ocr/')()
const ExtensionIndexLazyRouteImport = createFileRoute('/extension/')()
const DashboardIndexLazyRouteImport = createFileRoute('/dashboard/')()
const AnalyticsIndexLazyRouteImport = createFileRoute('/analytics/')()
const AdminProceduresIndexLazyRouteImport =
  createFileRoute('/admin-procedures/')()

const SettingsIndexLazyRoute = SettingsIndexLazyRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/settings/index.lazy').then((d) => d.Route),
)
const ProductsIndexLazyRoute = ProductsIndexLazyRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/products/index.lazy').then((d) => d.Route),
)
const OcrIndexLazyRoute = OcrIndexLazyRouteImport.update({
  id: '/ocr/',
  path: '/ocr/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/ocr/index.lazy').then((d) => d.Route))
const ExtensionIndexLazyRoute = ExtensionIndexLazyRouteImport.update({
  id: '/extension/',
  path: '/extension/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/extension/index.lazy').then((d) => d.Route),
)
const DashboardIndexLazyRoute = DashboardIndexLazyRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)
const AnalyticsIndexLazyRoute = AnalyticsIndexLazyRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/analytics/index.lazy').then((d) => d.Route),
)
const AdminProceduresIndexLazyRoute =
  AdminProceduresIndexLazyRouteImport.update({
    id: '/admin-procedures/',
    path: '/admin-procedures/',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/admin-procedures/index.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/admin-procedures': typeof AdminProceduresIndexLazyRoute
  '/analytics': typeof AnalyticsIndexLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/extension': typeof ExtensionIndexLazyRoute
  '/ocr': typeof OcrIndexLazyRoute
  '/products': typeof ProductsIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/admin-procedures': typeof AdminProceduresIndexLazyRoute
  '/analytics': typeof AnalyticsIndexLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/extension': typeof ExtensionIndexLazyRoute
  '/ocr': typeof OcrIndexLazyRoute
  '/products': typeof ProductsIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin-procedures/': typeof AdminProceduresIndexLazyRoute
  '/analytics/': typeof AnalyticsIndexLazyRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
  '/extension/': typeof ExtensionIndexLazyRoute
  '/ocr/': typeof OcrIndexLazyRoute
  '/products/': typeof ProductsIndexLazyRoute
  '/settings/': typeof SettingsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin-procedures'
    | '/analytics'
    | '/dashboard'
    | '/extension'
    | '/ocr'
    | '/products'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin-procedures'
    | '/analytics'
    | '/dashboard'
    | '/extension'
    | '/ocr'
    | '/products'
    | '/settings'
  id:
    | '__root__'
    | '/admin-procedures/'
    | '/analytics/'
    | '/dashboard/'
    | '/extension/'
    | '/ocr/'
    | '/products/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminProceduresIndexLazyRoute: typeof AdminProceduresIndexLazyRoute
  AnalyticsIndexLazyRoute: typeof AnalyticsIndexLazyRoute
  DashboardIndexLazyRoute: typeof DashboardIndexLazyRoute
  ExtensionIndexLazyRoute: typeof ExtensionIndexLazyRoute
  OcrIndexLazyRoute: typeof OcrIndexLazyRoute
  ProductsIndexLazyRoute: typeof ProductsIndexLazyRoute
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ocr/': {
      id: '/ocr/'
      path: '/ocr'
      fullPath: '/ocr'
      preLoaderRoute: typeof OcrIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/extension/': {
      id: '/extension/'
      path: '/extension'
      fullPath: '/extension'
      preLoaderRoute: typeof ExtensionIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin-procedures/': {
      id: '/admin-procedures/'
      path: '/admin-procedures'
      fullPath: '/admin-procedures'
      preLoaderRoute: typeof AdminProceduresIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AdminProceduresIndexLazyRoute: AdminProceduresIndexLazyRoute,
  AnalyticsIndexLazyRoute: AnalyticsIndexLazyRoute,
  DashboardIndexLazyRoute: DashboardIndexLazyRoute,
  ExtensionIndexLazyRoute: ExtensionIndexLazyRoute,
  OcrIndexLazyRoute: OcrIndexLazyRoute,
  ProductsIndexLazyRoute: ProductsIndexLazyRoute,
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
