/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const TemplateFillerIndexLazyRouteImport =
  createFileRoute('/template-filler/')()
const SettingsIndexLazyRouteImport = createFileRoute('/settings/')()
const ServicesIndexLazyRouteImport = createFileRoute('/services/')()
const ProceduresIndexLazyRouteImport = createFileRoute('/procedures/')()
const OcrIndexLazyRouteImport = createFileRoute('/ocr/')()
const LocalTemplateLoaderIndexLazyRouteImport = createFileRoute(
  '/local-template-loader/',
)()
const InfoIndexLazyRouteImport = createFileRoute('/info/')()
const FormsIndexLazyRouteImport = createFileRoute('/forms/')()
const DashboardIndexLazyRouteImport = createFileRoute('/dashboard/')()
const AnalyticsIndexLazyRouteImport = createFileRoute('/analytics/')()

const TemplateFillerIndexLazyRoute = TemplateFillerIndexLazyRouteImport.update({
  id: '/template-filler/',
  path: '/template-filler/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/template-filler/index.lazy').then((d) => d.Route),
)
const SettingsIndexLazyRoute = SettingsIndexLazyRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/settings/index.lazy').then((d) => d.Route),
)
const ServicesIndexLazyRoute = ServicesIndexLazyRouteImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/services/index.lazy').then((d) => d.Route),
)
const ProceduresIndexLazyRoute = ProceduresIndexLazyRouteImport.update({
  id: '/procedures/',
  path: '/procedures/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/procedures/index.lazy').then((d) => d.Route),
)
const OcrIndexLazyRoute = OcrIndexLazyRouteImport.update({
  id: '/ocr/',
  path: '/ocr/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/ocr/index.lazy').then((d) => d.Route))
const LocalTemplateLoaderIndexLazyRoute =
  LocalTemplateLoaderIndexLazyRouteImport.update({
    id: '/local-template-loader/',
    path: '/local-template-loader/',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/local-template-loader/index.lazy').then((d) => d.Route),
  )
const InfoIndexLazyRoute = InfoIndexLazyRouteImport.update({
  id: '/info/',
  path: '/info/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/info/index.lazy').then((d) => d.Route))
const FormsIndexLazyRoute = FormsIndexLazyRouteImport.update({
  id: '/forms/',
  path: '/forms/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/forms/index.lazy').then((d) => d.Route))
const DashboardIndexLazyRoute = DashboardIndexLazyRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)
const AnalyticsIndexLazyRoute = AnalyticsIndexLazyRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/analytics/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/analytics': typeof AnalyticsIndexLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/forms': typeof FormsIndexLazyRoute
  '/info': typeof InfoIndexLazyRoute
  '/local-template-loader': typeof LocalTemplateLoaderIndexLazyRoute
  '/ocr': typeof OcrIndexLazyRoute
  '/procedures': typeof ProceduresIndexLazyRoute
  '/services': typeof ServicesIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/template-filler': typeof TemplateFillerIndexLazyRoute
}
export interface FileRoutesByTo {
  '/analytics': typeof AnalyticsIndexLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/forms': typeof FormsIndexLazyRoute
  '/info': typeof InfoIndexLazyRoute
  '/local-template-loader': typeof LocalTemplateLoaderIndexLazyRoute
  '/ocr': typeof OcrIndexLazyRoute
  '/procedures': typeof ProceduresIndexLazyRoute
  '/services': typeof ServicesIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/template-filler': typeof TemplateFillerIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/analytics/': typeof AnalyticsIndexLazyRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
  '/forms/': typeof FormsIndexLazyRoute
  '/info/': typeof InfoIndexLazyRoute
  '/local-template-loader/': typeof LocalTemplateLoaderIndexLazyRoute
  '/ocr/': typeof OcrIndexLazyRoute
  '/procedures/': typeof ProceduresIndexLazyRoute
  '/services/': typeof ServicesIndexLazyRoute
  '/settings/': typeof SettingsIndexLazyRoute
  '/template-filler/': typeof TemplateFillerIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/analytics'
    | '/dashboard'
    | '/forms'
    | '/info'
    | '/local-template-loader'
    | '/ocr'
    | '/procedures'
    | '/services'
    | '/settings'
    | '/template-filler'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/analytics'
    | '/dashboard'
    | '/forms'
    | '/info'
    | '/local-template-loader'
    | '/ocr'
    | '/procedures'
    | '/services'
    | '/settings'
    | '/template-filler'
  id:
    | '__root__'
    | '/analytics/'
    | '/dashboard/'
    | '/forms/'
    | '/info/'
    | '/local-template-loader/'
    | '/ocr/'
    | '/procedures/'
    | '/services/'
    | '/settings/'
    | '/template-filler/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AnalyticsIndexLazyRoute: typeof AnalyticsIndexLazyRoute
  DashboardIndexLazyRoute: typeof DashboardIndexLazyRoute
  FormsIndexLazyRoute: typeof FormsIndexLazyRoute
  InfoIndexLazyRoute: typeof InfoIndexLazyRoute
  LocalTemplateLoaderIndexLazyRoute: typeof LocalTemplateLoaderIndexLazyRoute
  OcrIndexLazyRoute: typeof OcrIndexLazyRoute
  ProceduresIndexLazyRoute: typeof ProceduresIndexLazyRoute
  ServicesIndexLazyRoute: typeof ServicesIndexLazyRoute
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute
  TemplateFillerIndexLazyRoute: typeof TemplateFillerIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/template-filler/': {
      id: '/template-filler/'
      path: '/template-filler'
      fullPath: '/template-filler'
      preLoaderRoute: typeof TemplateFillerIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services/': {
      id: '/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/procedures/': {
      id: '/procedures/'
      path: '/procedures'
      fullPath: '/procedures'
      preLoaderRoute: typeof ProceduresIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ocr/': {
      id: '/ocr/'
      path: '/ocr'
      fullPath: '/ocr'
      preLoaderRoute: typeof OcrIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/local-template-loader/': {
      id: '/local-template-loader/'
      path: '/local-template-loader'
      fullPath: '/local-template-loader'
      preLoaderRoute: typeof LocalTemplateLoaderIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/info/': {
      id: '/info/'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forms/': {
      id: '/forms/'
      path: '/forms'
      fullPath: '/forms'
      preLoaderRoute: typeof FormsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AnalyticsIndexLazyRoute: AnalyticsIndexLazyRoute,
  DashboardIndexLazyRoute: DashboardIndexLazyRoute,
  FormsIndexLazyRoute: FormsIndexLazyRoute,
  InfoIndexLazyRoute: InfoIndexLazyRoute,
  LocalTemplateLoaderIndexLazyRoute: LocalTemplateLoaderIndexLazyRoute,
  OcrIndexLazyRoute: OcrIndexLazyRoute,
  ProceduresIndexLazyRoute: ProceduresIndexLazyRoute,
  ServicesIndexLazyRoute: ServicesIndexLazyRoute,
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
  TemplateFillerIndexLazyRoute: TemplateFillerIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
