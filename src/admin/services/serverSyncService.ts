// --- C·∫§U H√åNH ---
// !!! QUAN TR·ªåNG: Thay th·∫ø URL n√†y b·∫±ng ƒë·ªãa ch·ªâ server c·ªßa b·∫°n
const SERVER_BASE_URL = 'http://laptrinhid.qlns.vn';
const API_ENDPOINT_GET_FILES = '/uploads/files/'; // Thay th·∫ø b·∫±ng API endpoint th·∫≠t ƒë·ªÉ l·∫•y danh s√°ch file

// --- TYPE DEFINITIONS ---
// ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu sau khi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, s·∫µn s√†ng cho vi·ªác ƒë·ªìng b·ªô
interface ProcessedFile {
    maTTHC: string;
    originalName: string;
    downloadUrl: string;
}

// --- B·ªò ƒê·ªÜM (CACHE) ---
// T·∫°o m·ªôt b·ªô ƒë·ªám ƒë·ªÉ l∆∞u tr·ªØ b·∫£n ƒë·ªì √°nh x·∫°, tr√°nh vi·ªác ph·∫£i ƒë·ªçc v√† x·ª≠ l√Ω file JSON m·ªói l·∫ßn ƒë·ªìng b·ªô
let fileNameToCodeMap: Map<string, string> | null = null;

/**
 * T·∫£i v√† t·∫°o b·∫£n ƒë·ªì √°nh x·∫° t·ª´ tenFile sang maTTHC.
 * K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o cache ƒë·ªÉ tƒÉng t·ªëc cho nh·ªØng l·∫ßn g·ªçi sau.
 */
const getFileNameToCodeMap = async (): Promise<Map<string, string>> => {
    if (fileNameToCodeMap) {
        return fileNameToCodeMap;
    }

    console.log('üó∫Ô∏è Creating file name to procedure code map...');
    const response = await fetch('/DanhSachTTHC.json');
    if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i file DanhSachTTHC.json ƒë·ªÉ √°nh x·∫°.');
    }
    const procedureList: any[] = await response.json();

    const newMap = new Map<string, string>();
    for (const procedure of procedureList) {
        if (procedure.tenFile && procedure.maTTHC) {
            newMap.set(procedure.tenFile, procedure.maTTHC);
        }
    }

    fileNameToCodeMap = newMap;
    console.log(`üó∫Ô∏è Map created with ${newMap.size} entries.`);
    return fileNameToCodeMap;
};

/**
 * T√°ch t√™n file g·ªëc ra kh·ªèi t√™n file ƒë√£ ƒë∆∞·ª£c server thay ƒë·ªïi.
 * V√≠ d·ª•: "18.TK...[uuid].docx" -> "18.TK....docx"
 */
const getOriginalFileName = (serverFileName: string): string | null => {
    // Regex n√†y t√¨m v√† lo·∫°i b·ªè m·ªôt chu·ªói UUID (c√≥ ho·∫∑c kh√¥ng c√≥ g·∫°ch n·ªëi) ƒë·ª©ng tr∆∞·ªõc ph·∫ßn ƒëu√¥i file
    const uuidRegex = /[\da-f]{8}-?[\da-f]{4}-?[\da-f]{4}-?[\da-f]{4}-?[\da-f]{12}/i;
    const extensionRegex = /(\.docx|\.doc)$/i;

    const extensionMatch = serverFileName.match(extensionRegex);
    if (!extensionMatch) return null; // Kh√¥ng ph·∫£i file word
    const extension = extensionMatch[0];

    const nameWithoutExtension = serverFileName.replace(extensionRegex, '');
    const originalNameWithoutExtension = nameWithoutExtension.replace(uuidRegex, '');

    // N·∫øu kh√¥ng c√≥ g√¨ thay ƒë·ªïi, tr·∫£ v·ªÅ t√™n g·ªëc. ƒêi·ªÅu n√†y x·ª≠ l√Ω tr∆∞·ªùng h·ª£p server kh√¥ng ƒë·ªïi t√™n file.
    if (
        nameWithoutExtension === originalNameWithoutExtension &&
        !uuidRegex.test(nameWithoutExtension)
    ) {
        return serverFileName;
    }

    // N·∫øu c√≥ s·ª± thay ƒë·ªïi (ƒë√£ lo·∫°i b·ªè UUID), tr·∫£ v·ªÅ t√™n file ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c
    if (originalNameWithoutExtension) {
        return originalNameWithoutExtension + extension;
    }

    return null;
};

/**
 * G·ªçi API server, nh·∫≠n danh s√°ch file v√† x·ª≠ l√Ω ch√∫ng th√†nh m·ªôt ƒë·ªãnh d·∫°ng chu·∫©n.
 */
const fetchAndProcessFileList = async (): Promise<ProcessedFile[]> => {
    console.log(`üìû Calling API: ${SERVER_BASE_URL}${API_ENDPOINT_GET_FILES}`);

    // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω b·ªè comment ƒëo·∫°n code fetch n√†y
    /*
    const response = await fetch(`${SERVER_BASE_URL}${API_ENDPOINT_GET_FILES}`);
    if (!response.ok) {
        throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server ƒë·ªÉ l·∫•y danh s√°ch file.");
    }
    const serverResponse = await response.json();

    if (!serverResponse.success || !Array.isArray(serverResponse.data)) {
        throw new Error("D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ server kh√¥ng h·ª£p l·ªá.");
    }
    const serverFilePaths: string[] = serverResponse.data;
    */

    // --- PH·∫¶N GI·∫¢ L·∫¨P ƒê·ªÇ TEST ---
    // S·ª≠ d·ª•ng d·ªØ li·ªáu b·∫°n cung c·∫•p ƒë·ªÉ gi·∫£ l·∫≠p
    const serverResponse = {
        success: true,
        data: [
            '18.TKyeucaubansaotrichluchotich5eb55ed7-e7fa-4609-80c2-5d665d60887c_edited_2025-08-27T04-05-07.docx8cfbed39-fc57-467a-9f2d-f66e4425a157.docx'
        ]
    };
    const serverFilePaths: string[] = serverResponse.data;
    // --- K·∫æT TH√öC PH·∫¶N GI·∫¢ L·∫¨P ---

    const map = await getFileNameToCodeMap();
    const processedFiles: ProcessedFile[] = [];

    for (const filePath of serverFilePaths) {
        const fileNameFromServer = filePath.split('/').pop();
        if (!fileNameFromServer) continue;

        const originalName = getOriginalFileName(fileNameFromServer);
        if (!originalName) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√™n g·ªëc cho file: ${fileNameFromServer}. B·ªè qua.`);
            continue;
        }

        const maTTHC = map.get(originalName);
        if (!maTTHC) {
            console.warn(`üó∫Ô∏è Kh√¥ng t√¨m th·∫•y M√£ TTHC cho file: "${originalName}". B·ªè qua.`);
            continue;
        }

        processedFiles.push({
            maTTHC,
            originalName,
            downloadUrl: `${SERVER_BASE_URL}${filePath}`
        });
    }

    console.log(
        `‚úÖ Processed ${processedFiles.length}/${serverFilePaths.length} files successfully.`
    );
    return processedFiles;
};

/**
 * T·∫£i n·ªôi dung m·ªôt file t·ª´ URL
 */
const downloadFile = async (url: string): Promise<Blob> => {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`T·∫£i file th·∫•t b·∫°i t·ª´ ${url}: ${response.statusText}`);
    }
    return response.blob();
};

/**
 * H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán ƒë·ªìng b·ªô
 */
export const syncTemplatesFromServer = async (
    syncDirHandle: FileSystemDirectoryHandle,
    onProgress: (progress: { message: string; value: number }) => void
) => {
    try {
        onProgress({ message: 'ƒêang l·∫•y v√† x·ª≠ l√Ω danh s√°ch file t·ª´ server...', value: 0 });
        const filesToSync = await fetchAndProcessFileList();
        const totalFiles = filesToSync.length;

        if (totalFiles === 0) {
            onProgress({ message: 'Kh√¥ng t√¨m th·∫•y file h·ª£p l·ªá n√†o ƒë·ªÉ ƒë·ªìng b·ªô.', value: 100 });
            return;
        }

        for (let i = 0; i < totalFiles; i++) {
            const fileInfo = filesToSync[i];
            const progress = Math.round(((i + 1) / totalFiles) * 100);
            const displayName = `${fileInfo.maTTHC}/${fileInfo.originalName}`;
            onProgress({
                message: `(${i + 1}/${totalFiles}) ƒêang t·∫£i: ${displayName}`,
                value: progress
            });

            try {
                // T·∫°o th∆∞ m·ª•c [MaTTHC]
                const procedureDirHandle = await syncDirHandle.getDirectoryHandle(fileInfo.maTTHC, {
                    create: true
                });
                // T·∫°o th∆∞ m·ª•c 'docx' b√™n trong
                const docxDirHandle = await procedureDirHandle.getDirectoryHandle('docx', {
                    create: true
                });

                // T·∫£i file
                const fileBlob = await downloadFile(fileInfo.downloadUrl);

                // Ghi file v√†o th∆∞ m·ª•c
                const fileHandle = await docxDirHandle.getFileHandle(fileInfo.originalName, {
                    create: true
                });
                const writable = await fileHandle.createWritable();
                await writable.write(fileBlob);
                await writable.close();
            } catch (fileError) {
                console.error(`L·ªói khi x·ª≠ l√Ω file ${displayName}:`, fileError);
            }
        }
        onProgress({ message: 'ƒê·ªìng b·ªô ho√†n t·∫•t!', value: 100 });
    } catch (error) {
        console.error('L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh ƒë·ªìng b·ªô:', error);
        const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
        onProgress({ message: `ƒê·ªìng b·ªô th·∫•t b·∫°i: ${errorMessage}`, value: 100 });
        throw error;
    }
};
