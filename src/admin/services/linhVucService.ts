import axios, { AxiosError, AxiosInstance } from 'axios';

// URL c∆° s·ªü c·ªßa API
const API_BASE_URL = 'http://laptrinhid.qlns.vn/api';

/**
 * ƒê·ªãnh nghƒ©a c·∫•u tr√∫c cho m·ªôt ƒë·ªëi t∆∞·ª£ng Lƒ©nh V·ª±c.
 */
export interface LinhVuc {
    maLinhVuc: string;
    tenLinhVuc: string;
    maNganh: string;
    moTa: string;
}

/**
 * ƒê·ªãnh nghƒ©a c·∫•u tr√∫c cho ph·∫£n h·ªìi t·ª´ API getall c·ªßa LinhVuc.
 */
export interface LinhVucApiResponse {
    items: LinhVuc[];
    totalCount: number;
    pageNumber: number;
    pageSize: number;
    totalPages: number;
}

/**
 * ƒê·ªãnh nghƒ©a c·∫•u tr√∫c l·ªói API chung.
 */
export interface ApiError {
    message: string;
    status?: number;
    code?: string;
}

/**
 * ƒê·ªãnh nghƒ©a c·∫•u tr√∫c ph·∫£n h·ªìi chung, t∆∞∆°ng t·ª± nh∆∞ trong d·ª± √°n c·ªßa b·∫°n.
 */
export interface ApiResponse<T> {
    success: boolean;
    data: T | null;
    error?: ApiError;
}

class LinhVucApiService {
    private axiosInstance: AxiosInstance;

    constructor() {
        // Kh·ªüi t·∫°o m·ªôt instance c·ªßa axios v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        this.axiosInstance = axios.create({
            baseURL: API_BASE_URL,
            timeout: 15000, // Timeout sau 15 gi√¢y
            headers: {
                'Content-Type': 'application/json'
            }
        });

        // (T√πy ch·ªçn) Th√™m interceptor ƒë·ªÉ log request/response n·∫øu c·∫ßn
        this.axiosInstance.interceptors.request.use(config => {
            console.log(`üöÄ G·ª≠i y√™u c·∫ßu API: ${config.method?.toUpperCase()} ${config.url}`);
            return config;
        });
    }

    /**
     * X·ª≠ l√Ω l·ªói t·ª´ axios v√† chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng ApiError.
     * @param error L·ªói tr·∫£ v·ªÅ t·ª´ Axios.
     * @returns M·ªôt ƒë·ªëi t∆∞·ª£ng ApiError.
     */
    private handleError(error: AxiosError): ApiError {
        if (error.response) {
            // L·ªói t·ª´ ph√≠a server (c√≥ response tr·∫£ v·ªÅ)
            return {
                message: (error.response.data as any)?.message || error.message || 'L·ªói t·ª´ m√°y ch·ªß',
                status: error.response.status,
                code: error.code
            };
        } else if (error.request) {
            // L·ªói m·∫°ng (kh√¥ng nh·∫≠n ƒë∆∞·ª£c response)
            return {
                message: 'L·ªói m·∫°ng, kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi'
            };
        }
        // L·ªói kh√°c
        return {
            message: error.message || 'C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra'
        };
    }

    /**
     * L·∫•y danh s√°ch Lƒ©nh V·ª±c c√≥ ph√¢n trang.
     * @param pageNumber S·ªë trang hi·ªán t·∫°i.
     * @param pageSize S·ªë m·ª•c tr√™n m·ªói trang.
     * @returns M·ªôt Promise ch·ª©a ApiResponse v·ªõi d·ªØ li·ªáu LinhVucApiResponse.
     */
    async getAllLinhVuc(
        pageNumber: number,
        pageSize: number
    ): Promise<ApiResponse<LinhVucApiResponse>> {
        try {
            // G·ªçi API b·∫±ng ph∆∞∆°ng th·ª©c GET
            const response = await this.axiosInstance.get<LinhVucApiResponse>('/LinhVuc/getall', {
                params: {
                    pageNumber,
                    pageSize
                }
            });

            // Tr·∫£ v·ªÅ d·ªØ li·ªáu n·∫øu th√†nh c√¥ng
            return {
                success: true,
                data: response.data
            };
        } catch (error) {
            // Tr·∫£ v·ªÅ l·ªói n·∫øu th·∫•t b·∫°i
            return {
                success: false,
                data: null,
                error: this.handleError(error as AxiosError)
            };
        }
    }
}

// Xu·∫•t m·ªôt instance duy nh·∫•t c·ªßa service (singleton pattern)
export const linhVucApiService = new LinhVucApiService();
